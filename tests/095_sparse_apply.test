#!/bin/sh

#
# Manually create a .fw file that includes a sparse file inside
# of it and then test applying it. This is done in a way that
# can be run on systems w/o sparse file support.
#

. "$(cd "$(dirname "$0")" && pwd)/common.sh"

# Create the "sparse" resource.

# Create the compacted 60KB of random bytes
COMPACT_FILE=$WORK/compact.bin
i=0
while [ $i -lt 7 ]; do
    cat $TESTFILE_1K >> $COMPACT_FILE
    i=$(expr $i + 1)
done

# Create the sparse file using the Fibonacci
# series to specify the gaps between writes. This
# makes it possible to create a pathological sequence
# of data and hole segments.
SPARSE_FILE=$WORK/sparse.bin
seek=0
hole1=0
hole2=1
loc=0
SPARSE_MAP="{0"
i=0
while [ $i -lt 32 ]; do
    skip=$(expr $i \* 224 || true)
    hole=$(expr $hole1 + $hole2)
    seek=$(expr $seek + $hole)
    dd if=$COMPACT_FILE bs=1 count=224 skip=$skip of=$SPARSE_FILE seek=$seek conv=notrunc 2>/dev/null
    SPARSE_MAP="$SPARSE_MAP,$hole,224"

    seek=$(expr $seek + 224)

    hole1=$hole2
    hole2=$hole
    i=$(expr $i + 1)
done
SPARSE_MAP="$SPARSE_MAP}"

cat >$CONFIG <<EOF
file-resource sparsefile {
        host-path = "${COMPACT_FILE}"
}
task raw {
        on-resource sparsefile { raw_write(0) }
}
task fat {
        on-resource sparsefile {
            fat_mkfs(0, 32760)
            fat_write(0, "sparse.bin")
        }
}
EOF

NEW_META_CONF=$WORK/new-meta.conf
cat >$NEW_META_CONF <<EOF
file-resource "sparsefile" {
length=$SPARSE_MAP
blake2b-256=41efd72b91db5f9cc01642393f343770d0640448a433a8cfcdadab43b33904d8
}
task "raw" {
on-resource "sparsefile" {
funlist={"2",raw_write,"0"}
}
}
task "fat" {
on-resource "sparsefile" {
funlist={"3","fat_mkfs","0","32760","3","fat_write","0","sparse.bin"}
}
}
EOF

# Create the firmware file
$FWUP_CREATE -c -f $CONFIG -o $FWFILE

# Verify the file
$FWUP_VERIFY -V -i $FWFILE

# Create the new "sparse" fw file
NEW_FWFILE=$WORK/new.fw
unzip -q $FWFILE -d $UNZIPDIR
cp $NEW_META_CONF $UNZIPDIR/meta.conf
cd $UNZIPDIR
zip -q $NEW_FWFILE meta.conf data/sparsefile
cd -

# It should still verify
$FWUP_VERIFY -V -i $NEW_FWFILE

# Check that raw_write works with the sparse file
$FWUP_APPLY -a -d $IMGFILE -i $NEW_FWFILE -t raw
cmp_bytes 9234631 $SPARSE_FILE $IMGFILE

# Check that fat_write works with the sparse file
rm $IMGFILE
$FWUP_APPLY -a -d $IMGFILE -i $NEW_FWFILE -t fat

EXPECTED_FAT_OUTPUT=$WORK/expected.out
ACTUAL_FAT_OUTPUT=$WORK/actual.out

cat >$EXPECTED_FAT_OUTPUT << EOF
 Volume in drive : has no label
 Volume Serial Number is 0021-7FF8
Directory for ::/

sparse   bin   9234631 1980-01-01   0:00
        1 file            9 234 631 bytes
                          7 390 208 bytes free

EOF

# Check that the directory looks right
mdir -i $WORK/fwup.img > $ACTUAL_FAT_OUTPUT
diff -w $EXPECTED_FAT_OUTPUT $ACTUAL_FAT_OUTPUT

# Check the contents of the file
mcopy -n -i $WORK/fwup.img ::/sparse.bin $WORK/actual.sparse.bin
cmp $SPARSE_FILE $WORK/actual.sparse.bin

